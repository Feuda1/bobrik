import subprocess
import sys
import os
import json
import tempfile
import threading
import shutil
from PyQt6.QtCore import QThread, pyqtSignal, QTimer
from PyQt6.QtWidgets import QMessageBox

try:
    import requests
except ImportError:
    requests = None

class SimpleUpdateManager(QThread):
    log_signal = pyqtSignal(str, str)
    update_available_signal = pyqtSignal(str, str, str)  # version, notes, download_url
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.parent = parent
        self.current_version = "1.1.2"  # –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.github_repo = "Feuda1/bobrik"
        self.version_url = f"https://raw.githubusercontent.com/{self.github_repo}/main/version.json"
        self.exe_url = f"https://github.com/{self.github_repo}/releases/latest/download/bobrik.exe"
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª –∫ —Å–ª–æ—Ç—É –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        self.update_available_signal.connect(self._show_update_dialog_in_main_thread)
        
    def run(self):
        pass
        
    def check_for_updates(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        try:
            if not requests:
                self.log_signal.emit("–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Ç—Ä–µ–±—É–µ—Ç—Å—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ requests", "error")
                return
                
            self.log_signal.emit("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...", "info")
            threading.Thread(target=self._check_updates_async, daemon=True).start()
            
        except Exception as e:
            self.log_signal.emit(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {str(e)}", "error")
                
    def _check_updates_async(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        try:
            headers = {
                'User-Agent': 'bobrik-updater/1.0',
                'Cache-Control': 'no-cache'
            }
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ—Ä—Å–∏–∏
            response = requests.get(self.version_url, headers=headers, timeout=10)
            response.raise_for_status()
            
            version_data = response.json()
            latest_version = version_data.get('version', '')
            release_notes = version_data.get('notes', '')
            download_url = version_data.get('download_url', self.exe_url)
            
            if self._is_newer_version(latest_version, self.current_version):
                self.log_signal.emit(f"üéâ –î–æ—Å—Ç—É–ø–Ω–∞ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è: {latest_version}", "success")
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –≤ –≥–ª–∞–≤–Ω—ã–π –ø–æ—Ç–æ–∫
                self.update_available_signal.emit(latest_version, release_notes, download_url)
            else:
                self.log_signal.emit("‚úÖ –£ –≤–∞—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è", "success")
                    
        except requests.RequestException as e:
            self.log_signal.emit(f"üåê –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É", "error")
        except json.JSONDecodeError:
            self.log_signal.emit("üìÑ –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ñ–∞–π–ª–∞ –≤–µ—Ä—Å–∏–∏", "error")
        except Exception as e:
            self.log_signal.emit(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {str(e)}", "error")
                
    def _is_newer_version(self, latest, current):
        """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –≤–µ—Ä—Å–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1.0.1 > 1.0.0)"""
        try:
            latest_parts = [int(x) for x in latest.split('.')]
            current_parts = [int(x) for x in current.split('.')]
            
            # –î–æ–ø–æ–ª–Ω—è–µ–º –¥–æ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–π –¥–ª–∏–Ω—ã
            max_len = max(len(latest_parts), len(current_parts))
            latest_parts.extend([0] * (max_len - len(latest_parts)))
            current_parts.extend([0] * (max_len - len(current_parts)))
            
            return latest_parts > current_parts
        except:
            return False
            
    def _show_update_dialog_in_main_thread(self, version, notes, download_url):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        try:
            if not self.parent:
                return
                
            msg = QMessageBox(self.parent)
            msg.setWindowTitle('–î–æ—Å—Ç—É–ø–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ bobrik')
            
            text = f'üéâ –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è {version} –¥–æ—Å—Ç—É–ø–Ω–∞!\n\n'
            
            if notes:
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –æ–ø–∏—Å–∞–Ω–∏—è
                short_notes = notes[:300] + '...' if len(notes) > 300 else notes
                text += f'–ß—Ç–æ –Ω–æ–≤–æ–≥–æ:\n{short_notes}\n\n'
                
            text += 'üíæ –û–±–Ω–æ–≤–∏—Ç—å —Å–µ–π—á–∞—Å?'
            
            msg.setText(text)
            msg.setIcon(QMessageBox.Icon.Information)
            
            update_button = msg.addButton('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', QMessageBox.ButtonRole.YesRole)
            later_button = msg.addButton('‚è∞ –ü–æ–∑–∂–µ', QMessageBox.ButtonRole.NoRole)
            msg.setDefaultButton(update_button)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            result = msg.exec()
            
            if msg.clickedButton() == update_button:
                self.log_signal.emit("üì• –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...", "info")
                threading.Thread(target=self._download_and_install_update, 
                               args=(download_url, version), daemon=True).start()
            else:
                self.log_signal.emit("‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–ª–æ–∂–µ–Ω–æ", "info")
                
        except Exception as e:
            self.log_signal.emit(f"‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–ª–æ–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {str(e)}", "error")
            
    def _download_and_install_update(self, download_url, version):
        """–°–∫–∞—á–∏–≤–∞–µ—Ç –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ"""
        try:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            temp_dir = tempfile.gettempdir()
            new_exe_path = os.path.join(temp_dir, f"bobrik_{version}.exe")
            
            # –°–∫–∞—á–∏–≤–∞–µ–º –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é
            headers = {
                'User-Agent': 'bobrik-updater/1.0'
            }
            
            response = requests.get(download_url, stream=True, headers=headers, timeout=60)
            response.raise_for_status()
            
            total_size = int(response.headers.get('content-length', 0))
            downloaded = 0
            last_progress = 0
            
            with open(new_exe_path, 'wb') as f:
                for chunk in response.iter_content(chunk_size=8192):
                    if chunk:
                        f.write(chunk)
                        downloaded += len(chunk)
                        
                        if total_size > 0:
                            progress = int((downloaded / total_size) * 100)
                            if progress >= last_progress + 20:  # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–µ 20%
                                self.log_signal.emit(f"üì• –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {progress}%", "info")
                                last_progress = progress
            
            self.log_signal.emit("‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", "success")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            file_size_mb = os.path.getsize(new_exe_path) / (1024 * 1024)
            if file_size_mb < 5:  # –ï—Å–ª–∏ —Ñ–∞–π–ª –º–µ–Ω—å—à–µ 5 –ú–ë, —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫
                self.log_signal.emit("‚ùå –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –º–∞–ª", "error")
                return
                
            self.log_signal.emit(f"üì¶ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size_mb:.1f} –ú–ë", "info")
            
            # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            self._create_update_script(new_exe_path)
            
        except Exception as e:
            self.log_signal.emit(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {str(e)}", "error")
            
    def _create_update_script(self, new_exe_path):
        """–°–æ–∑–¥–∞–µ—Ç —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–º–µ–Ω—ã —Ñ–∞–π–ª–∞ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞"""
        try:
            current_exe = sys.executable if getattr(sys, 'frozen', False) else __file__
            temp_dir = tempfile.gettempdir()
            script_path = os.path.join(temp_dir, "bobrik_update.bat")
            
            # –°–æ–∑–¥–∞–µ–º batch —Å–∫—Ä–∏–ø—Ç –¥–ª—è Windows (–±–µ–∑ —ç–º–æ–¥–∑–∏)
            script_content = f'''@echo off
echo Obnovlenie bobrik...
timeout /t 2 /nobreak > nul

echo Sozdanie rezervnoy kopii...
if exist "{current_exe}.backup" del "{current_exe}.backup"
ren "{current_exe}" "{os.path.basename(current_exe)}.backup"

echo Ustanovka novoy versii...
copy "{new_exe_path}" "{current_exe}"

echo Zapusk obnovlennoy versii...
start "" "{current_exe}"

echo Ochistka vremennyh faylov...
timeout /t 2 /nobreak > nul
del "{new_exe_path}"
del "%~f0"
'''
            
            with open(script_path, 'w', encoding='ascii', errors='ignore') as f:
                f.write(script_content)
                
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º QTimer –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            QTimer.singleShot(100, lambda: self._show_final_confirmation(script_path, new_exe_path))
                
        except Exception as e:
            self.log_signal.emit(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {str(e)}", "error")
            
    def _show_final_confirmation(self, script_path, new_exe_path):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        try:
            if not self.parent:
                return
                
            msg = QMessageBox(self.parent)
            msg.setWindowTitle('–ì–æ—Ç–æ–≤–æ –∫ —É—Å—Ç–∞–Ω–æ–≤–∫–µ')
            msg.setText('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!\n\nüîÑ –°–µ–π—á–∞—Å bobrik –∑–∞–∫—Ä–æ–µ—Ç—Å—è –∏ –æ–±–Ω–æ–≤–∏—Ç—Å—è.\n\n‚ö° –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?')
            msg.setIcon(QMessageBox.Icon.Question)
            
            install_button = msg.addButton('üöÄ –û–±–Ω–æ–≤–∏—Ç—å', QMessageBox.ButtonRole.YesRole)
            cancel_button = msg.addButton('‚ùå –û—Ç–º–µ–Ω–∞', QMessageBox.ButtonRole.NoRole)
            
            result = msg.exec()
            
            if msg.clickedButton() == install_button:
                self.log_signal.emit("üîÑ –ó–∞–ø—É—Å–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...", "info")
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                subprocess.Popen([script_path], shell=True)
                
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
                if hasattr(self.parent, 'quit_application'):
                    QTimer.singleShot(500, self.parent.quit_application)
                else:
                    QTimer.singleShot(500, lambda: sys.exit(0))
            else:
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
                try:
                    os.remove(new_exe_path)
                    os.remove(script_path)
                except:
                    pass
                self.log_signal.emit("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞", "info")
                
        except Exception as e:
            self.log_signal.emit(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {str(e)}", "error")
            
    def set_github_repo(self, repo_path):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—É—Ç—å –∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é GitHub"""
        self.github_repo = repo_path
        self.version_url = f"https://raw.githubusercontent.com/{repo_path}/main/version.json"
        self.exe_url = f"https://github.com/{repo_path}/releases/latest/download/bobrik.exe"