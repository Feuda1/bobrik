import subprocess
import sys
import time
import threading
from PyQt6.QtCore import QThread, pyqtSignal
from PyQt6.QtWidgets import QMessageBox
from config import TOUCHSCREEN_KEYWORDS

class TouchscreenManager(QThread):
    log_signal = pyqtSignal(str, str)
    status_signal = pyqtSignal(bool)
    
    def __init__(self):
        super().__init__()
        self.is_disabled = False
        self.device_ids = []
        
    def run(self):
        pass
        
    def find_touchscreen_devices(self):
        try:
            if sys.platform == "win32":
                result = subprocess.run(['wmic', 'path', 'Win32_PnPEntity', 'where', 
                                       'ConfigManagerErrorCode=0', 'get', 'Name,DeviceID'], 
                                       capture_output=True, text=True, shell=True, encoding='utf-8', errors='ignore')
                
                lines = result.stdout.strip().split('\n')
                self.device_ids = []
                
                for line in lines:
                    lower_line = line.lower()
                    if any(keyword in lower_line for keyword in TOUCHSCREEN_KEYWORDS):
                        parts = line.split()
                        if parts:
                            device_id = parts[-1]
                            if 'HID' in device_id or 'USB' in device_id:
                                self.device_ids.append(device_id)
                                self.log_signal.emit(f"–ù–∞–π–¥–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {line.strip()}", "info")
                
                if not self.device_ids:
                    self.log_signal.emit("–°–µ–Ω—Å–æ—Ä–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", "warning")
                else:
                    self.log_signal.emit(f"–ù–∞–π–¥–µ–Ω–æ {len(self.device_ids)} —Å–µ–Ω—Å–æ—Ä–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤", "success")
                    
            else:
                self.log_signal.emit("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ Windows", "error")
                
        except Exception as e:
            self.log_signal.emit(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {str(e)}", "error")
    
    def toggle_touchscreen(self):
        if not self.device_ids:
            self.log_signal.emit("–ü–æ–∏—Å–∫ —Å–µ–Ω—Å–æ—Ä–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤...", "info")
            self.find_touchscreen_devices()
            
        if not self.device_ids:
            self.log_signal.emit("–ù–µ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è", "error")
            return
            
        if self.is_disabled:
            self.enable_touchscreen()
        else:
            self.disable_touchscreen()
            
    def disable_touchscreen(self):
        try:
            success_count = 0
            for device_id in self.device_ids:
                cmd = f'pnputil /disable-device "{device_id}"'
                result = subprocess.run(cmd, capture_output=True, text=True, shell=True, encoding='utf-8', errors='ignore')
                if result.returncode == 0:
                    success_count += 1
                    
            if success_count > 0:
                self.is_disabled = True
                self.status_signal.emit(True)
                self.log_signal.emit(f"–°–µ–Ω—Å–æ—Ä–Ω—ã–π —ç–∫—Ä–∞–Ω –æ—Ç–∫–ª—é—á–µ–Ω ({success_count} —É—Å—Ç—Ä–æ–π—Å—Ç–≤)", "success")
                self.show_desktop_notification(True)
            else:
                self.log_signal.emit("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª—é—á–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (—Ç—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)", "error")
                
        except Exception as e:
            self.log_signal.emit(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏: {str(e)}", "error")
            
    def enable_touchscreen(self):
        try:
            success_count = 0
            for device_id in self.device_ids:
                cmd = f'pnputil /enable-device "{device_id}"'
                result = subprocess.run(cmd, capture_output=True, text=True, shell=True, encoding='utf-8', errors='ignore')
                if result.returncode == 0:
                    success_count += 1
                    
            if success_count > 0:
                self.is_disabled = False
                self.status_signal.emit(False)
                self.log_signal.emit(f"–°–µ–Ω—Å–æ—Ä–Ω—ã–π —ç–∫—Ä–∞–Ω –≤–∫–ª—é—á–µ–Ω ({success_count} —É—Å—Ç—Ä–æ–π—Å—Ç–≤)", "success")
                self.show_desktop_notification(False)
            else:
                self.log_signal.emit("–ù–µ —É–¥–∞–ª–æ—Å—å –≤–∫–ª—é—á–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞", "error")
                
        except Exception as e:
            self.log_signal.emit(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏: {str(e)}", "error")
            
    def reboot_touchscreen(self):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ–Ω—Å–æ—Ä–Ω—ã–π —ç–∫—Ä–∞–Ω —Å –≤—ã–±–æ—Ä–æ–º –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏"""
        try:
            if not self.device_ids:
                self.log_signal.emit("–ü–æ–∏—Å–∫ —Å–µ–Ω—Å–æ—Ä–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤...", "info")
                self.find_touchscreen_devices()
                
            if not self.device_ids:
                self.log_signal.emit("–°–µ–Ω—Å–æ—Ä–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞", "error")
                return
                
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞
            msg = QMessageBox()
            msg.setWindowTitle('–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ–Ω—Å–æ—Ä–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞')
            msg.setText('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:')
            msg.setIcon(QMessageBox.Icon.Question)
            
            reboot_button = msg.addButton('üîÑ –¢–æ–ª—å–∫–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫', QMessageBox.ButtonRole.YesRole)
            calibrate_button = msg.addButton('üéØ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ + –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞', QMessageBox.ButtonRole.ActionRole)
            cancel_button = msg.addButton('‚ùå –û—Ç–º–µ–Ω–∞', QMessageBox.ButtonRole.RejectRole)
            
            msg.setDefaultButton(reboot_button)
            msg.exec()
            
            if msg.clickedButton() == cancel_button:
                self.log_signal.emit("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ–Ω—Å–æ—Ä–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω", "info")
                return
            elif msg.clickedButton() == calibrate_button:
                self.log_signal.emit("–ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å –∫–∞–ª–∏–±—Ä–æ–≤–∫–æ–π...", "info")
                threading.Thread(target=self._reboot_with_calibration, daemon=True).start()
            else:
                self.log_signal.emit("–ù–∞—á–∏–Ω–∞–µ–º –æ–±—ã—á–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ–Ω—Å–æ—Ä–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞...", "info")
                threading.Thread(target=self._reboot_only, daemon=True).start()
                
        except Exception as e:
            self.log_signal.emit(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ —Å–µ–Ω—Å–æ—Ä–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞: {str(e)}", "error")
            
    def _reboot_only(self):
        """–û–±—ã—á–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–µ–∑ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏"""
        try:
            was_disabled = self.is_disabled
            
            self.log_signal.emit("–û—Ç–∫–ª—é—á–∞–µ–º —Å–µ–Ω—Å–æ—Ä–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞...", "info")
            disabled_count = 0
            
            for device_id in self.device_ids:
                try:
                    cmd = f'pnputil /disable-device "{device_id}"'
                    result = subprocess.run(cmd, capture_output=True, text=True, shell=True, 
                                          encoding='utf-8', errors='ignore', 
                                          creationflags=subprocess.CREATE_NO_WINDOW)
                    if result.returncode == 0:
                        disabled_count += 1
                except:
                    continue
                    
            if disabled_count > 0:
                self.log_signal.emit(f"–û—Ç–∫–ª—é—á–µ–Ω–æ {disabled_count} —Å–µ–Ω—Å–æ—Ä–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤", "info")
            else:
                self.log_signal.emit("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª—é—á–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞", "warning")
                return
                
            self.log_signal.emit("–û–∂–∏–¥–∞–Ω–∏–µ 3 —Å–µ–∫—É–Ω–¥—ã...", "info")
            time.sleep(3)
            
            self.log_signal.emit("–í–∫–ª—é—á–∞–µ–º —Å–µ–Ω—Å–æ—Ä–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞...", "info")
            enabled_count = 0
            
            for device_id in self.device_ids:
                try:
                    cmd = f'pnputil /enable-device "{device_id}"'
                    result = subprocess.run(cmd, capture_output=True, text=True, shell=True, 
                                          encoding='utf-8', errors='ignore',
                                          creationflags=subprocess.CREATE_NO_WINDOW)
                    if result.returncode == 0:
                        enabled_count += 1
                except:
                    continue
                    
            if enabled_count > 0:
                if was_disabled:
                    self.is_disabled = True
                    self.status_signal.emit(True)
                else:
                    self.is_disabled = False
                    self.status_signal.emit(False)
                    
                self.log_signal.emit(f"–í–∫–ª—é—á–µ–Ω–æ {enabled_count} —Å–µ–Ω—Å–æ—Ä–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤", "info")
                self.log_signal.emit("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ–Ω—Å–æ—Ä–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω", "success")
                self.show_desktop_notification_reboot()
            else:
                self.log_signal.emit("–ù–µ —É–¥–∞–ª–æ—Å—å –≤–∫–ª—é—á–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞", "error")
                
        except Exception as e:
            self.log_signal.emit(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ: {str(e)}", "error")
    
    def _reboot_with_calibration(self):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å –∫–∞–ª–∏–±—Ä–æ–≤–∫–æ–π"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ –¥–µ–ª–∞–µ–º –æ–±—ã—á–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫
            self._reboot_only()
            
            # –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã
            time.sleep(2)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–∞–ª–∏–±—Ä–æ–≤–∫—É
            self.log_signal.emit("–ó–∞–ø—É—Å–∫ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ —Å–µ–Ω—Å–æ—Ä–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞...", "info")
            self._open_calibration()
            
        except Exception as e:
            self.log_signal.emit(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ —Å –∫–∞–ª–∏–±—Ä–æ–≤–∫–æ–π: {str(e)}", "error")
    
    def _open_calibration(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –∫–∞–ª–∏–±—Ä–æ–≤–∫—É —Å–µ–Ω—Å–æ—Ä–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞"""
        try:
            if sys.platform != "win32":
                self.log_signal.emit("–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ Windows", "error")
                return
            
            calibration_opened = False
            
            # –ú–µ—Ç–æ–¥ 1: tabcal.exe - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞ Windows
            try:
                subprocess.Popen(['tabcal.exe'], 
                               creationflags=subprocess.CREATE_NO_WINDOW)
                self.log_signal.emit("–ó–∞–ø—É—â–µ–Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞ Windows", "success")
                calibration_opened = True
            except FileNotFoundError:
                pass
            except Exception:
                pass
            
            # –ú–µ—Ç–æ–¥ 2: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞–Ω—à–µ—Ç–Ω–æ–≥–æ –ü–ö
            if not calibration_opened:
                try:
                    subprocess.Popen(['control', 'tabletpc.cpl'], 
                                   creationflags=subprocess.CREATE_NO_WINDOW)
                    self.log_signal.emit("–û—Ç–∫—Ä—ã—Ç—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞–Ω—à–µ—Ç–Ω–æ–≥–æ –ü–ö", "success")
                    self.log_signal.emit("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∫–ª–∞–¥–∫—É '–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞'", "info")
                    calibration_opened = True
                except Exception:
                    pass
            
            # –ú–µ—Ç–æ–¥ 3: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–∞ Windows
            if not calibration_opened:
                try:
                    subprocess.Popen(['ms-settings:pen'], 
                                   creationflags=subprocess.CREATE_NO_WINDOW, shell=True)
                    self.log_signal.emit("–û—Ç–∫—Ä—ã—Ç—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–∞ Windows", "success")
                    calibration_opened = True
                except Exception:
                    pass
            
            # –ú–µ—Ç–æ–¥ 4: –î–∏—Å–ø–µ—Ç—á–µ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤
            if not calibration_opened:
                try:
                    subprocess.Popen(['devmgmt.msc'], 
                                   creationflags=subprocess.CREATE_NO_WINDOW)
                    self.log_signal.emit("–û—Ç–∫—Ä—ã—Ç –¥–∏—Å–ø–µ—Ç—á–µ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤", "info")
                    self.log_signal.emit("–ù–∞–π–¥–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ HID –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", "info")
                    calibration_opened = True
                except Exception:
                    pass
            
            if calibration_opened:
                self.log_signal.emit("üí° –î–ª—è —Ç–æ—á–Ω–æ–π –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç–∏–ª—É—Å", "info")
                self.log_signal.emit("üéØ –ù–∞–∂–∏–º–∞–π—Ç–µ —Ç–æ—á–Ω–æ –≤ —Ü–µ–Ω—Ç—Ä —Ü–µ–ª–µ–π", "info")
            else:
                self.log_signal.emit("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∫–∞–ª–∏–±—Ä–æ–≤–∫—É", "error")
                self.log_signal.emit("üí° –ù–∞–π–¥–∏—Ç–µ '–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞' –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Windows", "info")
                
        except Exception as e:
            self.log_signal.emit(f"–û—à–∏–±–∫–∞ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏: {str(e)}", "error")
            
    def show_desktop_notification(self, is_disabled):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–∫–ª—é—á–µ–Ω–∏–∏/–æ—Ç–∫–ª—é—á–µ–Ω–∏–∏"""
        try:
            if is_disabled:
                subprocess.Popen(['msg', '*', '/TIME:3', '–°–µ–Ω—Å–æ—Ä–Ω—ã–π —ç–∫—Ä–∞–Ω –û–¢–ö–õ–Æ–ß–ï–ù'], 
                               shell=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL,
                               creationflags=subprocess.CREATE_NO_WINDOW)
            else:
                subprocess.Popen(['msg', '*', '/TIME:3', '–°–µ–Ω—Å–æ—Ä–Ω—ã–π —ç–∫—Ä–∞–Ω –í–ö–õ–Æ–ß–ï–ù'], 
                               shell=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL,
                               creationflags=subprocess.CREATE_NO_WINDOW)
        except:
            pass
            
    def show_desktop_notification_reboot(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ"""
        try:
            subprocess.Popen(['msg', '*', '/TIME:4', '–°–µ–Ω—Å–æ—Ä–Ω—ã–π —ç–∫—Ä–∞–Ω –ü–ï–†–ï–ó–ê–ü–£–©–ï–ù'], 
                           shell=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL,
                           creationflags=subprocess.CREATE_NO_WINDOW)
        except:
            pass