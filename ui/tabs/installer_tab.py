from PyQt6.QtWidgets import (QWidget, QVBoxLayout, QHBoxLayout, QPushButton, QLabel, 
                             QGridLayout, QScrollArea, QLineEdit, QMessageBox)
from PyQt6.QtCore import Qt, pyqtSignal, QTimer, QThread
import subprocess
import sys
import os
import tempfile
import threading
import shutil
import zipfile

try:
    import requests
    HAS_REQUESTS = True
except ImportError:
    HAS_REQUESTS = False

class DownloadWorker(QThread):
    log_signal = pyqtSignal(str, str)
    progress_signal = pyqtSignal(int)
    finished_signal = pyqtSignal(str, bool)  # path, success
    
    def __init__(self, url, filename):
        super().__init__()
        self.url = url
        self.filename = filename
        
    def run(self):
        try:
            if not HAS_REQUESTS:
                self.log_signal.emit("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ requests –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞", "error")
                self.finished_signal.emit("", False)
                return
                
            temp_dir = tempfile.gettempdir()
            file_path = os.path.join(temp_dir, self.filename)
            
            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
            }
            
            response = requests.get(self.url, stream=True, headers=headers, timeout=60)
            response.raise_for_status()
            
            total_size = int(response.headers.get('content-length', 0))
            downloaded = 0
            last_progress = 0
            
            with open(file_path, 'wb') as f:
                for chunk in response.iter_content(chunk_size=8192):
                    if chunk:
                        f.write(chunk)
                        downloaded += len(chunk)
                        if total_size > 0:
                            progress = min(90, int((downloaded / total_size) * 90))
                            if progress >= last_progress + 10:
                                self.log_signal.emit(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ: {progress}%", "info")
                                last_progress = progress
            
            file_size_mb = os.path.getsize(file_path) / (1024 * 1024)
            self.log_signal.emit(f"–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ({file_size_mb:.1f} –ú–ë)", "success")
            self.finished_signal.emit(file_path, True)
            
        except Exception as e:
            self.log_signal.emit(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}", "error")
            self.finished_signal.emit("", False)

class InstallerTab(QWidget):
    log_signal = pyqtSignal(str, str)
    
    def __init__(self):
        super().__init__()
        self.all_programs = {
            "7zip": {
                "name": "7-Zip",
                "url": "https://github.com/Feuda1/Programs-for-Bobrik/releases/download/v1.0.0/7z2500-x64.exe",
                "filename": "7z2500-x64.exe"
            },
            "advanced_ip_scanner": {
                "name": "Advanced IP Scanner",
                "url": "https://github.com/Feuda1/Programs-for-Bobrik/releases/download/v1.0.0/Advanced_IP_Scanner_2.5.4594.1.exe",
                "filename": "Advanced_IP_Scanner_2.5.4594.1.exe"
            },
            "anydesk": {
                "name": "AnyDesk",
                "url": "https://github.com/Feuda1/Programs-for-Bobrik/releases/download/v1.0.0/AnyDesk.exe",
                "filename": "AnyDesk.exe"
            },
            "assistant": {
                "name": "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç",
                "url": "https://github.com/Feuda1/Programs-for-Bobrik/releases/download/v1.0.0/assistant_install_6.exe",
                "filename": "assistant_install_6.exe"
            },
            "com_port_checker": {
                "name": "Com Port Checker",
                "url": "https://github.com/Feuda1/Programs-for-Bobrik/releases/download/v1.0.0/ComPortChecker.1.1.zip",
                "filename": "ComPortChecker.1.1.zip",
                "is_zip": True
            },
            "database_net": {
                "name": "Database Net",
                "url": "https://github.com/Feuda1/Programs-for-Bobrik/releases/download/v1.0.0/DatabaseNet5Pro.zip",
                "filename": "DatabaseNet5Pro.zip",
                "is_zip": True
            },
            "notepad_plus": {
                "name": "Notepad++",
                "url": "https://github.com/Feuda1/Programs-for-Bobrik/releases/download/v1.0.0/npp.8.8.2.Installer.x64.exe",
                "filename": "npp.8.8.2.Installer.x64.exe"
            },
            "printer_test": {
                "name": "Printer TEST V3.1C",
                "url": "https://github.com/Feuda1/Programs-for-Bobrik/releases/download/v1.0.0/Printer-TEST-V3.1C.zip",
                "filename": "Printer-TEST-V3.1C.zip",
                "is_zip": True
            },
            "rhelper": {
                "name": "Rhelper",
                "url": "https://github.com/Feuda1/Programs-for-Bobrik/releases/download/v1.0.0/remote-access-setup.exe",
                "filename": "remote-access-setup.exe"
            }
        }
        
        self.download_worker = None
        self.init_ui()
        
    def init_ui(self):
        layout = QVBoxLayout(self)
        layout.setContentsMargins(15, 15, 15, 15)
        layout.setSpacing(15)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –ø–æ–∏—Å–∫
        header_layout = QVBoxLayout()
        
        title = QLabel("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º")
        title.setStyleSheet("""
            QLabel {
                color: #ffffff;
                font-size: 18px;
                font-weight: 500;
                padding-bottom: 5px;
            }
        """)
        header_layout.addWidget(title)
        
        # –ü–æ–∏—Å–∫
        self.search_edit = QLineEdit()
        self.search_edit.setPlaceholderText("üîç –ü–æ–∏—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º...")
        self.search_edit.setFixedHeight(35)
        self.search_edit.textChanged.connect(self.filter_programs)
        self.search_edit.setStyleSheet("""
            QLineEdit {
                background-color: #1a1a1a;
                border: 1px solid #2a2a2a;
                border-radius: 6px;
                padding: 8px 12px;
                color: #e0e0e0;
                font-size: 13px;
            }
            QLineEdit:focus {
                border-color: #3b82f6;
            }
        """)
        header_layout.addWidget(self.search_edit)
        
        layout.addLayout(header_layout)
        
        # –°–∫—Ä–æ–ª–ª–∏—Ä—É–µ–º–∞—è –æ–±–ª–∞—Å—Ç—å —Å –ø—Ä–æ–≥—Ä–∞–º–º–∞–º–∏
        scroll_area = QScrollArea()
        scroll_area.setWidgetResizable(True)
        scroll_area.setHorizontalScrollBarPolicy(Qt.ScrollBarPolicy.ScrollBarAlwaysOff)
        scroll_area.setVerticalScrollBarPolicy(Qt.ScrollBarPolicy.ScrollBarAsNeeded)
        scroll_area.setStyleSheet("""
            QScrollArea {
                background-color: transparent;
                border: none;
            }
            QScrollBar:vertical {
                background-color: #1a1a1a;
                width: 8px;
                border-radius: 4px;
            }
            QScrollBar::handle:vertical {
                background-color: #404040;
                border-radius: 4px;
                min-height: 20px;
            }
            QScrollBar::handle:vertical:hover {
                background-color: #505050;
            }
        """)
        
        self.content_widget = QWidget()
        self.programs_layout = QGridLayout(self.content_widget)
        self.programs_layout.setSpacing(10)
        self.programs_layout.setContentsMargins(10, 10, 10, 10)
        self.programs_layout.setAlignment(Qt.AlignmentFlag.AlignTop | Qt.AlignmentFlag.AlignLeft)
        
        self.create_program_buttons()
        
        scroll_area.setWidget(self.content_widget)
        layout.addWidget(scroll_area)
        
    def create_program_buttons(self):
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–Ω–æ–ø–∫–∏
        for i in reversed(range(self.programs_layout.count())):
            child = self.programs_layout.itemAt(i).widget()
            if child:
                child.setParent(None)
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–æ–∏—Å–∫—É
        search_text = self.search_edit.text().lower() if hasattr(self, 'search_edit') else ""
        filtered_programs = {}
        
        for key, program in self.all_programs.items():
            if search_text == "" or search_text in program["name"].lower():
                filtered_programs[key] = program
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
        row = 0
        col = 0
        max_cols = 4
        
        for program_key, program in filtered_programs.items():
            button = self.create_install_button(program["name"], program_key)
            self.programs_layout.addWidget(button, row, col)
            
            col += 1
            if col >= max_cols:
                col = 0
                row += 1
        
        # –ï—Å–ª–∏ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
        if not filtered_programs and search_text:
            no_results = QLabel("üîç –ü—Ä–æ–≥—Ä–∞–º–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            no_results.setStyleSheet("""
                QLabel {
                    color: #808080;
                    font-size: 14px;
                    padding: 20px;
                    text-align: center;
                }
            """)
            no_results.setAlignment(Qt.AlignmentFlag.AlignCenter)
            self.programs_layout.addWidget(no_results, 0, 0, 1, max_cols)
        
    def filter_programs(self):
        self.create_program_buttons()
        
    def create_install_button(self, program_name, program_key):
        button = QPushButton(program_name)
        button.setFixedSize(140, 50)
        button.setCursor(Qt.CursorShape.PointingHandCursor)
        button.clicked.connect(lambda: self.install_program(program_key))
        button.setStyleSheet("""
            QPushButton {
                background-color: #2a2a2a;
                border: 1px solid #3a3a3a;
                border-radius: 6px;
                color: #e0e0e0;
                font-size: 12px;
                font-weight: 500;
                padding: 6px;
                text-align: center;
            }
            QPushButton:hover {
                background-color: #3a3a3a;
                border-color: #4a4a4a;
                color: #ffffff;
            }
            QPushButton:pressed {
                background-color: #1a1a1a;
            }
        """)
        
        return button
        
    def install_program(self, program_key):
        if program_key not in self.all_programs:
            self.log_signal.emit(f"–ü—Ä–æ–≥—Ä–∞–º–º–∞ {program_key} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", "error")
            return
            
        program = self.all_programs[program_key]
        
        msg = QMessageBox(self)
        msg.setWindowTitle('–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã')
        msg.setText(f'–ù–∞—á–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –∏ —É—Å—Ç–∞–Ω–æ–≤–∫—É {program["name"]}?')
        msg.setIcon(QMessageBox.Icon.Question)
        
        yes_button = msg.addButton('–î–∞', QMessageBox.ButtonRole.YesRole)
        no_button = msg.addButton('–ù–µ—Ç', QMessageBox.ButtonRole.NoRole)
        msg.setDefaultButton(no_button)
        
        msg.exec()
        
        if msg.clickedButton() == yes_button:
            self.download_and_install(program)
        
    def download_and_install(self, program):
        if not HAS_REQUESTS:
            self.log_signal.emit("–î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º —Ç—Ä–µ–±—É–µ—Ç—Å—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ requests", "error")
            self.log_signal.emit("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install requests", "info")
            return
            
        self.log_signal.emit(f"–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É {program['name']}...", "info")
        
        self.download_worker = DownloadWorker(program["url"], program["filename"])
        self.download_worker.log_signal.connect(self.log_signal.emit)
        self.download_worker.finished_signal.connect(lambda path, success: self.on_download_finished(path, success, program))
        self.download_worker.start()
        
    def on_download_finished(self, file_path, success, program):
        if not success:
            return
            
        try:
            if program.get("is_zip", False):
                self.handle_zip_file(file_path, program)
            else:
                self.handle_executable(file_path, program)
        except Exception as e:
            self.log_signal.emit(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}", "error")
            
    def get_safe_folder_name(self, program_name):
        """–ü–æ–ª—É—á–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ —Ç–æ–ª—å–∫–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º"""
        safe_names = {
            "Advanced IP Scanner": "Advanced_IP_Scanner",
            "AnyDesk": "AnyDesk", 
            "Com Port Checker": "ComPortChecker",
            "Database Net": "DatabaseNet",
            "Printer TEST V3.1C": "PrinterTEST",
            "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç": "Assistant",
            "Rhelper": "Rhelper",
            "7-Zip": "7-Zip",
            "Notepad++": "Notepad_Plus"
        }
        return safe_names.get(program_name, program_name.replace(" ", "_"))

    def handle_zip_file(self, zip_path, program):
        try:
            # –ü–æ–ª—É—á–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è –ø–∞–ø–∫–∏
            safe_name = self.get_safe_folder_name(program['name'])
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫—É–¥–∞ –∏–∑–≤–ª–µ–∫–∞—Ç—å
            if program.get("filename") in ["Advanced_IP_Scanner_2.5.4594.1.exe", "AnyDesk.exe", 
                                         "ComPortChecker.1.1.zip", "DatabaseNet5Pro.zip", 
                                         "Printer-TEST-V3.1C.zip"]:
                # –ù–∞ —Ä–∞–±–æ—á–∏–π —Å—Ç–æ–ª
                desktop_path = os.path.join(os.path.expanduser("~"), "Desktop")
                extract_dir = os.path.join(desktop_path, safe_name)
                location_msg = "–Ω–∞ —Ä–∞–±–æ—á–∏–π —Å—Ç–æ–ª"
            else:
                # –í –∑–∞–≥—Ä—É–∑–∫–∏
                downloads_path = os.path.join(os.path.expanduser("~"), "Downloads")
                extract_dir = os.path.join(downloads_path, safe_name)
                location_msg = "–≤ –ø–∞–ø–∫—É –ó–∞–≥—Ä—É–∑–∫–∏"
            
            if os.path.exists(extract_dir):
                shutil.rmtree(extract_dir)
            
            os.makedirs(extract_dir)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π –¥–ª—è —Ä—É—Å—Å–∫–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π
            try:
                # –ü—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞ UTF-8
                with zipfile.ZipFile(zip_path, 'r') as zip_ref:
                    for member in zip_ref.infolist():
                        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
                        try:
                            # –ü—Ä–æ–±—É–µ–º –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ cp866 (DOS –∫–æ–¥–∏—Ä–æ–≤–∫–∞)
                            member.filename = member.filename.encode('cp437').decode('cp866')
                        except:
                            try:
                                # –ü—Ä–æ–±—É–µ–º –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ windows-1251
                                member.filename = member.filename.encode('cp437').decode('windows-1251')
                            except:
                                # –û—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å
                                pass
                        
                        zip_ref.extract(member, extract_dir)
                        
            except Exception as encoding_error:
                # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π, –∏–∑–≤–ª–µ–∫–∞–µ–º –æ–±—ã—á–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
                self.log_signal.emit(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –≤–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π —Ñ–∞–π–ª–æ–≤", "warning")
                with zipfile.ZipFile(zip_path, 'r') as zip_ref:
                    zip_ref.extractall(extract_dir)
            
            subprocess.Popen(['explorer', extract_dir])
            self.log_signal.emit(f"{program['name']} –∏–∑–≤–ª–µ—á–µ–Ω {location_msg} ({safe_name})", "success")
            
            try:
                os.remove(zip_path)
            except:
                pass
                
        except Exception as e:
            self.log_signal.emit(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –∞—Ä—Ö–∏–≤–æ–º: {str(e)}", "error")
            
    def handle_executable(self, exe_path, program):
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫—É–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å exe —Ñ–∞–π–ª—ã
            if program.get("filename") in ["Advanced_IP_Scanner_2.5.4594.1.exe", "AnyDesk.exe"]:
                # –ù–∞ —Ä–∞–±–æ—á–∏–π —Å—Ç–æ–ª
                desktop_path = os.path.join(os.path.expanduser("~"), "Desktop")
                final_path = os.path.join(desktop_path, program["filename"])
                location_msg = "–Ω–∞ —Ä–∞–±–æ—á–∏–π —Å—Ç–æ–ª"
            else:
                # –í –∑–∞–≥—Ä—É–∑–∫–∏
                downloads_path = os.path.join(os.path.expanduser("~"), "Downloads")
                final_path = os.path.join(downloads_path, program["filename"])
                location_msg = "–≤ –ø–∞–ø–∫—É –ó–∞–≥—Ä—É–∑–∫–∏"
            
            # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª –≤ –Ω—É–∂–Ω–æ–µ –º–µ—Å—Ç–æ
            try:
                shutil.copy2(exe_path, final_path)
                self.log_signal.emit(f"{program['name']} —Å–æ—Ö—Ä–∞–Ω–µ–Ω {location_msg}", "info")
            except:
                final_path = exe_path  # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å, –∑–∞–ø—É—Å–∫–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
            
            self.log_signal.emit(f"–ó–∞–ø—É—Å–∫ —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫–∞ {program['name']}...", "info")
            subprocess.Popen([final_path])
            self.log_signal.emit(f"{program['name']} - —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω", "success")
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è Rhelper - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞—Ä–æ–ª—å –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
            if program.get("filename") == "remote-access-setup.exe":
                self.log_signal.emit("üîë –ü–∞—Ä–æ–ª—å –¥–ª—è Rhelper: remote-access-setup", "warning")
                
        except Exception as e:
            self.log_signal.emit(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫–∞: {str(e)}", "error")