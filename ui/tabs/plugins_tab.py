from PyQt6.QtWidgets import (QWidget, QVBoxLayout, QHBoxLayout, QPushButton, QLabel, 
                             QGridLayout, QScrollArea, QLineEdit, QMessageBox, QComboBox,
                             QProgressBar, QTextEdit)
from PyQt6.QtCore import Qt, pyqtSignal, QTimer, QThread
import subprocess
import sys
import os
import tempfile
import shutil
import zipfile
import re
from urllib.parse import urljoin, unquote

try:
    import requests
    from bs4 import BeautifulSoup
    HAS_REQUIREMENTS = True
except ImportError:
    HAS_REQUIREMENTS = False

class PluginParser(QThread):
    plugin_found = pyqtSignal(str, list)  # name, versions (—É–±–∏—Ä–∞–µ–º description)
    parsing_finished = pyqtSignal()
    log_signal = pyqtSignal(str, str)
    
    def __init__(self, plugins_config):
        super().__init__()
        self.plugins_config = plugins_config
        
    def run(self):
        if not HAS_REQUIREMENTS:
            self.log_signal.emit("–¢—Ä–µ–±—É—é—Ç—Å—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏: pip install requests beautifulsoup4", "error")
            return
            
        for plugin_name, plugin_url in self.plugins_config.items():
            try:
                self.log_signal.emit(f"–ü–∞—Ä—Å–∏–Ω–≥ {plugin_name}...", "info")
                versions = self.parse_plugin_versions(plugin_url)
                if versions:
                    self.plugin_found.emit(plugin_name, versions)
                    self.log_signal.emit(f"–ù–∞–π–¥–µ–Ω–æ {len(versions)} –≤–µ—Ä—Å–∏–π –¥–ª—è {plugin_name}", "success")
                else:
                    self.log_signal.emit(f"–í–µ—Ä—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è {plugin_name}", "warning")
            except Exception as e:
                self.log_signal.emit(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ {plugin_name}: {str(e)}", "error")
                
        self.parsing_finished.emit()
        
    def parse_plugin_versions(self, plugin_url):
        """–ü–∞—Ä—Å–∏—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ –ø–ª–∞–≥–∏–Ω–∞"""
        try:
            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
            }
            
            response = requests.get(plugin_url, headers=headers, timeout=30)
            response.raise_for_status()
            
            soup = BeautifulSoup(response.text, 'html.parser')
            versions = []
            
            # –ò—â–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –∞—Ä—Ö–∏–≤—ã (.zip)
            for link in soup.find_all('a', href=True):
                href = link['href']
                if href.endswith('.zip'):
                    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é —Å—Å—ã–ª–∫—É
                    full_url = urljoin(plugin_url, href)
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
                    filename = unquote(os.path.basename(href))
                    version_name = filename.replace('.zip', '')
                    
                    versions.append({
                        'name': version_name,
                        'url': full_url,
                        'filename': filename
                    })
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤–µ—Ä—Å–∏–∏ (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
            versions.sort(key=lambda x: x['name'], reverse=True)
            return versions
            
        except Exception as e:
            raise Exception(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {str(e)}")

class PluginDownloader(QThread):
    log_signal = pyqtSignal(str, str)
    progress_signal = pyqtSignal(int)
    finished_signal = pyqtSignal(str, bool)  # path, success
    
    def __init__(self, plugin_name, version_info):
        super().__init__()
        self.plugin_name = plugin_name
        self.version_info = version_info
        
    def run(self):
        try:
            if not HAS_REQUIREMENTS:
                self.log_signal.emit("–¢—Ä–µ–±—É—é—Ç—Å—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ requests –∏ beautifulsoup4", "error")
                self.finished_signal.emit("", False)
                return
                
            downloads_path = os.path.join(os.path.expanduser("~"), "Downloads")
            file_path = os.path.join(downloads_path, self.version_info['filename'])
            
            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
            }
            
            self.log_signal.emit(f"–ó–∞–≥—Ä—É–∑–∫–∞ {self.plugin_name} {self.version_info['name']}...", "info")
            
            response = requests.get(self.version_info['url'], stream=True, headers=headers, timeout=60)
            response.raise_for_status()
            
            total_size = int(response.headers.get('content-length', 0))
            downloaded = 0
            last_progress = 0
            
            with open(file_path, 'wb') as f:
                for chunk in response.iter_content(chunk_size=8192):
                    if chunk:
                        f.write(chunk)
                        downloaded += len(chunk)
                        if total_size > 0:
                            progress = min(90, int((downloaded / total_size) * 90))
                            if progress >= last_progress + 10:
                                self.progress_signal.emit(progress)
                                last_progress = progress
            
            self.progress_signal.emit(100)
            file_size_mb = os.path.getsize(file_path) / (1024 * 1024)
            self.log_signal.emit(f"–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ({file_size_mb:.1f} –ú–ë)", "success")
            
            # –†–∞–∑–∞—Ä—Ö–∏–≤–∏—Ä—É–µ–º
            self.extract_plugin(file_path)
            
            self.finished_signal.emit(file_path, True)
            
        except Exception as e:
            self.log_signal.emit(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}", "error")
            self.finished_signal.emit("", False)
    
    def extract_plugin(self, zip_path):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–ª–∞–≥–∏–Ω –∏ —Å–Ω–∏–º–∞–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫—É"""
        try:
            downloads_path = os.path.join(os.path.expanduser("~"), "Downloads")
            extract_dir = os.path.join(downloads_path, f"{self.plugin_name}_{self.version_info['name']}")
            
            if os.path.exists(extract_dir):
                shutil.rmtree(extract_dir)
            
            os.makedirs(extract_dir)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—Ä—Ö–∏–≤
            with zipfile.ZipFile(zip_path, 'r') as zip_ref:
                zip_ref.extractall(extract_dir)
            
            self.log_signal.emit(f"–ê—Ä—Ö–∏–≤ –∏–∑–≤–ª–µ—á–µ–Ω –≤ {extract_dir}", "info")
            
            # –°–Ω–∏–º–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É —Å –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
            self.unblock_files(extract_dir)
            
            # –£–¥–∞–ª—è–µ–º –∞—Ä—Ö–∏–≤
            os.remove(zip_path)
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–∞–ø–∫—É
            subprocess.Popen(['explorer', extract_dir])
            
        except Exception as e:
            self.log_signal.emit(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è: {str(e)}", "error")
    
    def unblock_files(self, directory):
        """–°–Ω–∏–º–∞–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫—É Windows —Å —Ñ–∞–π–ª–æ–≤"""
        try:
            unblocked_count = 0
            
            for root, dirs, files in os.walk(directory):
                for file in files:
                    file_path = os.path.join(root, file)
                    try:
                        # –°–Ω–∏–º–∞–µ–º –∞—Ç—Ä–∏–±—É—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —á–µ—Ä–µ–∑ PowerShell
                        cmd = f'powershell -Command "Unblock-File -Path \'{file_path}\'"'
                        result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
                        if result.returncode == 0:
                            unblocked_count += 1
                    except Exception:
                        continue
            
            if unblocked_count > 0:
                self.log_signal.emit(f"–°–Ω—è—Ç–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å {unblocked_count} —Ñ–∞–π–ª–æ–≤", "success")
            
        except Exception as e:
            self.log_signal.emit(f"–û—à–∏–±–∫–∞ —Å–Ω—è—Ç–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {str(e)}", "warning")

class PluginsTab(QWidget):
    log_signal = pyqtSignal(str, str)
    
    def __init__(self):
        super().__init__()
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–ª–∞–≥–∏–Ω–æ–≤
        self.plugins_config = {
            'AlcoholMarkingPlugin': 'https://rapid.iiko.ru/plugins/AlcoholMarkingPlugin/',
            'OnlineMarkingVerification': 'https://rapid.iiko.ru/plugins/Resto%20OnlineMarkingVerification/',
            'Sberbank': 'https://rapid.iiko.ru/plugins/Smart%20Sberbank/',
            'DualConnector': 'https://rapid.iiko.ru/plugins/Resto.Front.Api.PaymentSystem.DualConnector/',
            'Arrivals': 'https://rapid.iiko.ru/plugins/Arrivals/'
        }
        
        self.plugins_data = {}
        self.parser = None
        self.downloader = None
        
        self.init_ui()
        
    def init_ui(self):
        layout = QVBoxLayout(self)
        layout.setContentsMargins(15, 15, 15, 15)
        layout.setSpacing(15)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_layout = QHBoxLayout()
        
        title = QLabel("–ü–ª–∞–≥–∏–Ω—ã iiko")
        title.setStyleSheet("""
            QLabel {
                color: #ffffff;
                font-size: 18px;
                font-weight: 500;
                padding-bottom: 5px;
            }
        """)
        header_layout.addWidget(title)
        
        header_layout.addStretch()
        
        # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞
        self.refresh_button = QPushButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫")
        self.refresh_button.setFixedSize(140, 35)
        self.refresh_button.clicked.connect(self.refresh_plugins_list)
        self.refresh_button.setStyleSheet("""
            QPushButton {
                background-color: #1e40af;
                border: 1px solid #3b82f6;
                border-radius: 6px;
                color: #3b82f6;
                font-size: 12px;
                font-weight: 500;
                padding: 6px 12px;
            }
            QPushButton:hover {
                background-color: #1d4ed8;
                border-color: #60a5fa;
                color: #60a5fa;
            }
            QPushButton:pressed {
                background-color: #1e3a8a;
            }
        """)
        header_layout.addWidget(self.refresh_button)
        
        layout.addLayout(header_layout)
        
        # –ü–æ–∏—Å–∫ –ø–ª–∞–≥–∏–Ω–æ–≤
        self.search_edit = QLineEdit()
        self.search_edit.setPlaceholderText("üîç –ü–æ–∏—Å–∫ –ø–ª–∞–≥–∏–Ω–æ–≤...")
        self.search_edit.setFixedHeight(35)
        self.search_edit.textChanged.connect(self.filter_plugins)
        self.search_edit.setStyleSheet("""
            QLineEdit {
                background-color: #1a1a1a;
                border: 1px solid #2a2a2a;
                border-radius: 6px;
                padding: 8px 12px;
                color: #e0e0e0;
                font-size: 13px;
            }
            QLineEdit:focus {
                border-color: #3b82f6;
            }
        """)
        layout.addWidget(self.search_edit)
        
        # –°–∫—Ä–æ–ª–ª–∏—Ä—É–µ–º–∞—è –æ–±–ª–∞—Å—Ç—å —Å –ø–ª–∞–≥–∏–Ω–∞–º–∏
        scroll_area = QScrollArea()
        scroll_area.setWidgetResizable(True)
        scroll_area.setHorizontalScrollBarPolicy(Qt.ScrollBarPolicy.ScrollBarAlwaysOff)
        scroll_area.setVerticalScrollBarPolicy(Qt.ScrollBarPolicy.ScrollBarAsNeeded)
        scroll_area.setStyleSheet("""
            QScrollArea {
                background-color: transparent;
                border: none;
            }
            QScrollBar:vertical {
                background-color: #1a1a1a;
                width: 8px;
                border-radius: 4px;
            }
            QScrollBar::handle:vertical {
                background-color: #404040;
                border-radius: 4px;
                min-height: 20px;
            }
            QScrollBar::handle:vertical:hover {
                background-color: #505050;
            }
        """)
        
        self.content_widget = QWidget()
        self.plugins_layout = QVBoxLayout(self.content_widget)
        self.plugins_layout.setSpacing(10)
        self.plugins_layout.setContentsMargins(10, 10, 10, 10)
        self.plugins_layout.setAlignment(Qt.AlignmentFlag.AlignTop)
        
        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        self.status_label = QLabel("–ù–∞–∂–º–∏—Ç–µ '–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫' –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–ª–∞–≥–∏–Ω–æ–≤")
        self.status_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.status_label.setStyleSheet("""
            QLabel {
                color: #808080;
                font-size: 14px;
                padding: 40px;
                background-color: #0f0f0f;
                border-radius: 8px;
                border: 1px solid #2a2a2a;
            }
        """)
        self.plugins_layout.addWidget(self.status_label)
        
        scroll_area.setWidget(self.content_widget)
        layout.addWidget(scroll_area)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        if not HAS_REQUIREMENTS:
            self.show_requirements_message()
    
    def show_requirements_message(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö"""
        self.status_label.setText("""
        ‚ö†Ô∏è –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–ª–∞–≥–∏–Ω–∞–º–∏ —Ç—Ä–µ–±—É—é—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏:
        
        pip install requests beautifulsoup4
        
        –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É.
        """)
        self.refresh_button.setEnabled(False)
    
    def refresh_plugins_list(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–ª–∞–≥–∏–Ω–æ–≤"""
        if not HAS_REQUIREMENTS:
            self.log_signal.emit("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç—Ä–µ–±—É–µ–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏: pip install requests beautifulsoup4", "error")
            return
        
        self.refresh_button.setEnabled(False)
        self.refresh_button.setText("‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞...")
        
        self.status_label.setText("–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–ª–∞–≥–∏–Ω–æ–≤...")
        self.plugins_data.clear()
        
        # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫
        for i in reversed(range(self.plugins_layout.count())):
            child = self.plugins_layout.itemAt(i).widget()
            if child and child != self.status_label:
                child.setParent(None)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–µ—Ä
        self.parser = PluginParser(self.plugins_config)
        self.parser.plugin_found.connect(self.on_plugin_found)
        self.parser.parsing_finished.connect(self.on_parsing_finished)
        self.parser.log_signal.connect(self.log_signal.emit)
        self.parser.start()
    
    def on_plugin_found(self, plugin_name, versions):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã–π –ø–ª–∞–≥–∏–Ω"""
        self.plugins_data[plugin_name] = {
            'versions': versions
        }
        self.create_plugin_widget(plugin_name, "", versions)  # –ü—É—Å—Ç–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
    
    def on_parsing_finished(self):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        self.refresh_button.setEnabled(True)
        self.refresh_button.setText("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫")
        
        if self.plugins_data:
            self.status_label.hide()
            self.log_signal.emit(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.plugins_data)} –ø–ª–∞–≥–∏–Ω–æ–≤", "success")
        else:
            self.status_label.setText("–ü–ª–∞–≥–∏–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.")
    
    def create_plugin_widget(self, plugin_name, description, versions):
        """–°–æ–∑–¥–∞–µ—Ç —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –≤–∏–¥–∂–µ—Ç –¥–ª—è –ø–ª–∞–≥–∏–Ω–∞"""
        plugin_frame = QWidget()
        plugin_frame.setFixedHeight(60)  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤—ã—Å–æ—Ç–∞
        plugin_frame.setStyleSheet("""
            QWidget {
                background-color: #1a1a1a;
                border: 1px solid #2a2a2a;
                border-radius: 6px;
            }
        """)
        
        layout = QHBoxLayout(plugin_frame)
        layout.setContentsMargins(15, 10, 15, 10)
        layout.setSpacing(15)
        
        # –ù–∞–∑–≤–∞–Ω–∏–µ –ø–ª–∞–≥–∏–Ω–∞
        name_label = QLabel(plugin_name)
        name_label.setFixedWidth(200)  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —à–∏—Ä–∏–Ω–∞
        name_label.setStyleSheet("""
            QLabel {
                color: #ffffff;
                font-size: 14px;
                font-weight: 600;
            }
        """)
        layout.addWidget(name_label)
        
        # –í—ã–±–æ—Ä –≤–µ—Ä—Å–∏–∏
        version_combo = QComboBox()
        version_combo.setFixedSize(200, 35)  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä
        version_combo.setFocusPolicy(Qt.FocusPolicy.StrongFocus)  # –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É –∫–æ–ª–µ—Å–æ–º
        for version in versions:
            version_combo.addItem(version['name'], version)
        
        version_combo.setStyleSheet("""
            QComboBox {
                background-color: #2a2a2a;
                border: 1px solid #3a3a3a;
                border-radius: 4px;
                padding: 6px 10px;
                color: #e0e0e0;
                font-size: 12px;
            }
            QComboBox:hover {
                border-color: #4a4a4a;
            }
            QComboBox::drop-down {
                border: none;
                width: 20px;
            }
            QComboBox::down-arrow {
                image: none;
                border-left: 4px solid transparent;
                border-right: 4px solid transparent;
                border-top: 4px solid #808080;
                margin-right: 5px;
            }
            QComboBox QAbstractItemView {
                background-color: #2a2a2a;
                border: 1px solid #3a3a3a;
                selection-background-color: #3b82f6;
                color: #e0e0e0;
            }
        """)
        
        # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É –∫–æ–ª–µ—Å–æ–º –¥–ª—è –∫–æ–º–±–æ–±–æ–∫—Å–∞
        version_combo.wheelEvent = lambda event: None
        
        layout.addWidget(version_combo)
        
        layout.addStretch()
        
        # –ö–Ω–æ–ø–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
        install_button = QPushButton("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")
        install_button.setFixedSize(120, 35)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É
        install_button.clicked.connect(
            lambda: self.install_plugin(plugin_name, version_combo.currentData())
        )
        install_button.setStyleSheet("""
            QPushButton {
                background-color: #059669;
                border: 1px solid #10b981;
                border-radius: 4px;
                color: #ffffff;
                font-size: 12px;
                font-weight: 500;
            }
            QPushButton:hover {
                background-color: #047857;
                border-color: #34d399;
            }
            QPushButton:pressed {
                background-color: #065f46;
            }
        """)
        layout.addWidget(install_button)
        
        # –°–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø–ª–∞–≥–∏–Ω
        if self.status_label.isVisible():
            self.status_label.hide()
        
        self.plugins_layout.addWidget(plugin_frame)
    
    def filter_plugins(self):
        """–§–∏–ª—å—Ç—Ä—É–µ—Ç –ø–ª–∞–≥–∏–Ω—ã –ø–æ –ø–æ–∏—Å–∫—É"""
        search_text = self.search_edit.text().lower()
        
        for i in range(self.plugins_layout.count()):
            widget = self.plugins_layout.itemAt(i).widget()
            if widget and widget != self.status_label:
                # –ò—â–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–∞–≥–∏–Ω–∞ –≤ –≤–∏–¥–∂–µ—Ç–µ
                name_labels = widget.findChildren(QLabel)
                if name_labels:
                    plugin_name = name_labels[0].text().lower()
                    widget.setVisible(search_text in plugin_name)
    
    def install_plugin(self, plugin_name, version_info):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–ª–∞–≥–∏–Ω"""
        if not version_info:
            self.log_signal.emit("–í–µ—Ä—Å–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω–∞", "error")
            return
        
        msg = QMessageBox(self)
        msg.setWindowTitle('–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–≥–∏–Ω–∞')
        msg.setText(f'–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å {plugin_name} –≤–µ—Ä—Å–∏–∏ {version_info["name"]}?\n\n–ü–ª–∞–≥–∏–Ω –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –∏–∑–≤–ª–µ—á–µ–Ω –≤ –ø–∞–ø–∫—É –ó–∞–≥—Ä—É–∑–∫–∏.')
        msg.setIcon(QMessageBox.Icon.Question)
        
        yes_button = msg.addButton('–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å', QMessageBox.ButtonRole.YesRole)
        no_button = msg.addButton('–û—Ç–º–µ–Ω–∞', QMessageBox.ButtonRole.NoRole)
        msg.setDefaultButton(yes_button)
        
        msg.exec()
        
        if msg.clickedButton() == yes_button:
            self.download_plugin(plugin_name, version_info)
    
    def download_plugin(self, plugin_name, version_info):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–ª–∞–≥–∏–Ω"""
        self.log_signal.emit(f"–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ {plugin_name}...", "info")
        
        self.downloader = PluginDownloader(plugin_name, version_info)
        self.downloader.log_signal.connect(self.log_signal.emit)
        self.downloader.finished_signal.connect(self.on_plugin_installed)
        self.downloader.start()
    
    def on_plugin_installed(self, file_path, success):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–∞–≥–∏–Ω–∞"""
        if success:
            self.log_signal.emit("–ü–ª–∞–≥–∏–Ω —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω", "success")
        else:
            self.log_signal.emit("–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–∞–≥–∏–Ω–∞", "error")